#include <SFML/Graphics.hpp>
#include <Windows.h>

using namespace sf;

double scaleX = 0.24; // Коэфициенты масштабирования спрайтов
double scaleY = 0.24;

const int H = 21;
const int W = 40;

int scrX = GetSystemMetrics(SM_CXSCREEN);
int scrY = GetSystemMetrics(SM_CYSCREEN);

int ground = 1720; // координата земли

String TileMap[H] = {

	"BBBBBBBBBBB   BBBBBBBB   BBBBBBBB       ",	
	"B                                       ",
	"                                        ",
	"                                  B     ",
	"                             BB   B     ",
	"                                  B     ",
	"                       BB         B     ",
	"                                        ",
	"      BBBBBB                            ",
	"                                        ",
	"                                        ",
	"                                  B     ",
	"                                  B     ",
	"                  BB              B     ",
	"                  BB              B     ",
	"                  BB              B     ",
	"BBBBBBBBBB   BBBBBBBBBBBBBBBBBBBBBBBBBBB",
	"                                  B     ",
	"                                  B     ",
	"                                  B     ",
	"      BBBBBBBBBBBBBB              B     ",

};

class PLAYER {
public:
	float dx, dy; //скорость
	FloatRect rect; // место 4-х переменных координат ширины высоты, теперь две
	bool onGround; // на земле мы или нет
	Sprite sprite; // картинка игрока
	float currentFrame; // текущий кадр	
	bool moveLeft = 0; // двигались ли мы вправо или влево

	PLAYER(Texture &image)
	{
		/*Texture texture,textureStand;
		texture.loadFromFile("Source/NEST02.png");
		textureStand.loadFromFile("Source/0.png");*/
		sprite.setTexture(image);
				 
		sprite.setTextureRect(IntRect(0, 500, 500, 1000));  //подрезаем картинку в нужный кадр*/
		rect = FloatRect(0, 0, 500 * scaleX, 500 * scaleY);  //первоначальные координаты и ширина высота

		sprite.setScale(scaleX, scaleY);  // Масштабирование персонажа

		 rect.left = 370;
		rect.top = 280; 
		dx = dy = 0;
		currentFrame = 0;
		
	}

	void update(float time)
	{
		
		rect.left += dx*time; // перемещаем по горизонтали

		CollisionX(); /*Проверка на столкновение по горизонтали*/

		if (!onGround) dy = dy + .0005f*time; //если мы не на земле, то падаем с ускорением

		rect.top += dy*time; //перемещаем по вертикали

		onGround = false;

		CollisionY(); /*Проверка на столкновение по вертикали*/

		if (rect.top > ground) { rect.top = ground; dy = 0.0f; onGround = true; } // проверяем на земле ли мы?

		currentFrame += 0.005f*time;
		if (currentFrame > 10) currentFrame -= 10;
	    
		if ((dx == 0) && (dy == 0) && (moveLeft == false)) { sprite.setTextureRect(IntRect(0, 500, 500, 500)); }  //когда стоим
		if ((dx == 0) && (dy == 0) && (moveLeft == true)) { sprite.setTextureRect(IntRect(500, 500, -500, 500)); }

		if (dx > 0) { sprite.setTextureRect(IntRect(500 * int(currentFrame), 0, 500, 500)); moveLeft = false; }
		if (dx < 0) { sprite.setTextureRect(IntRect(500 * int(currentFrame) + 500, 0, -500, 500)); moveLeft = true; }
		sprite.setPosition(rect.left, rect.top); //переводим спрайт на координаты
		dx = 0;
	
	}
	 
	void CollisionX() { /*Проверка на столкновение по горизонтали*/
		for (int i = rect.top/40; i < (rect.top+rect.height)/40; i++) 
			for (int j = rect.left/40; j < (rect.left+rect.width)/40; j++)
			{
				if (TileMap[i][j] == 'B')
				{
					
					if (dx > 0) rect.left = j * 40 - rect.width;
					if (dx < 0) rect.left = j * 40 + 40;
			    }
			}
		
	};
	
	void CollisionY() { /*Проверка на столкновение по вертикали*/
		for (int i = rect.top / 40; i < (rect.top + rect.height) / 40; i++) 
			for (int j = rect.left / 40; j < (rect.left + rect.width) / 40; j++)
			{
				if (TileMap[i][j] == 'B')
				{
				 	if (dy > 0) {rect.top = i * 40 - rect.height; dy = 0; onGround = true;}
					if (dy < 0) {rect.top = i * 40 + 40; dy = 0;} 
				}
			}
		
	};  

};

int main()
{
	RenderWindow window(VideoMode(scrX-10, scrY-10), "BFGirl", Style::None);

	Texture texture;
	texture.loadFromFile("Source/NEST03.png");

	float currentFrame = 0;

	PLAYER p(texture);

	Clock clock;

	RectangleShape rectangle(Vector2f(40,40));  //элементы уровня

	while (window.isOpen())
	{

		float time = clock.getElapsedTime().asMicroseconds();
		time = time / 450;

		clock.restart();
		Event event;
		while (window.pollEvent(event))
		{
			if (event.type == Event::Closed)
				window.close();
		}

		if (Keyboard::isKeyPressed(Keyboard::Left))
		{
			p.dx = -0.1f;			 
		}

		if (Keyboard::isKeyPressed(Keyboard::Right))
		{
			p.dx = 0.1f;
		}   

		if (Keyboard::isKeyPressed(Keyboard::Up))
		{
			if (p.onGround) { p.dy = -0.55f; p.onGround = false; }
		}

		if (Keyboard::isKeyPressed(Keyboard::Down))
		{

		}

		p.update(time);

		window.clear(Color::White);

		for (int i = 0; i < H; i++) {
		for (int j = 0; j < W; j++)
		{
			if (TileMap[i][j] == 'B') rectangle.setFillColor(Color::Black);
			if (TileMap[i][j] == '0') rectangle.setFillColor(Color::Green);
			if (TileMap[i][j] == ' ') continue;

			rectangle.setPosition(j * 40, i * 40);
			window.draw(rectangle);
		}
	}

			window.draw(p.sprite);
			window.display();
		
	}
	return 0;

}